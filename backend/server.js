// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
import express from 'express';
import cors from 'cors';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import fs from 'fs';
import multer from 'multer'; // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è express
const app = express();
const PORT = process.env.PORT || 5000;

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const dataDir = join(__dirname, 'data');
const publicDir = join(__dirname, '..', 'public');
const circlesDir = join(publicDir, 'circle');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir, { recursive: true });
}
if (!fs.existsSync(circlesDir)) {
  fs.mkdirSync(circlesDir, { recursive: true });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
const corsOptions = {
  origin: '*', // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Å –ª—é–±–æ–≥–æ –¥–æ–º–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: false, // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
  optionsSuccessStatus: 200
};
app.use(cors(corsOptions));

// Middleware
app.use(express.json()); // –ü–∞—Ä—Å–∏–Ω–≥ JSON –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö
app.use(express.static(publicDir)); // –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, circlesDir);
  },
  filename: function (req, file, cb) {
    const circleId = req.params.circleId;
    const ext = file.originalname.split('.').pop();
    cb(null, `circle${circleId}.${ext}`);
  }
});

const upload = multer({
  storage: storage,
  limits: { fileSize: 100 * 1024 * 1024 }, // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ 100MB
  fileFilter: function (req, file, cb) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.mimetype.startsWith('video/')) {
      return cb(new Error('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã!'), false);
    }
    cb(null, true);
  }
});

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ - –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –¥–∞—Ç—É)
const RELATIONSHIP_START_DATE = new Date('2023-12-09T00:00:00Z');

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const achievements = [
  {
    id: 'start',
    title: '–ù–∞—á–∞–ª–æ –ø—É—Ç–∏',
    description: '–í—ã –≤–º–µ—Å—Ç–µ —É–∂–µ 1 –¥–µ–Ω—å!',
    icon: '‚ú®',
    condition: (days) => days >= 1,
  },
  {
    id: 'week',
    title: '–ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è',
    description: '–ü—Ä–æ—à–ª–∞ —Ü–µ–ª–∞—è –Ω–µ–¥–µ–ª—è –≤–º–µ—Å—Ç–µ!',
    icon: 'üóìÔ∏è',
    condition: (days) => days >= 7,
  },
  {
    id: 'month',
    title: '–ú–µ—Å—è—Ü –ª—é–±–≤–∏',
    description: '–í—ã –≤–º–µ—Å—Ç–µ —É–∂–µ –º–µ—Å—è—Ü!',
    icon: 'üíñ',
    condition: (days) => days >= 30,
  },
  {
    id: '100days',
    title: '100 –¥–Ω–µ–π —Å—á–∞—Å—Ç—å—è',
    description: '–°—Ç–æ –¥–Ω–µ–π —Ä–∞–¥–æ—Å—Ç–∏ –∏ –ª—é–±–≤–∏!',
    icon: 'üíØ',
    condition: (days) => days >= 100,
  },
  {
    id: 'halfyear',
    title: '–ü–æ–ª –≥–æ–¥–∞ –≤–º–µ—Å—Ç–µ',
    description: '–ü–æ–ª–≥–æ–¥–∞ —Ç–µ–ø–ª—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π!',
    icon: '‚òÄÔ∏è',
    condition: (days) => days >= 183,
  },
  {
    id: 'anniversary',
    title: '–ì–æ–¥–æ–≤—â–∏–Ω–∞',
    description: '–¶–µ–ª—ã–π –≥–æ–¥ –≤–º–µ—Å—Ç–µ! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!',
    icon: 'üéâ',
    condition: (days) => days >= 365,
  },
];

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserDataPath = (userId) => {
  return join(dataDir, `${userId}.json`);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserData = (userId) => {
  const filePath = getUserDataPath(userId);
  if (fs.existsSync(filePath)) {
    try {
      const data = fs.readFileSync(filePath, 'utf8');
      return JSON.parse(data);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error);
      return null;
    }
  }
  return null;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const saveUserData = (userId, data) => {
  try {
    const filePath = getUserDataPath(userId);
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ ${getUserDataPath(userId)}:`, error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const calculateUnlockedAchievements = (startDate) => {
  const now = new Date();
  const diffTime = Math.abs(now - startDate);
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

  const unlocked = [];
  achievements.forEach(ach => {
    if (ach.condition(diffDays)) {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (startDate + –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª-–≤–æ –¥–Ω–µ–π)
      const unlockDate = new Date(startDate);
      const daysToAdd = achievements.find(a => a.id === ach.id).condition.toString().match(/\d+/)[0]; // –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –¥–Ω–µ–π –∏–∑ —É—Å–ª–æ–≤–∏—è
      unlockDate.setDate(startDate.getDate() + parseInt(daysToAdd));

      unlocked.push({
        ...ach,
        unlockedDate: unlockDate.toISOString().split('T')[0] // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
      });
    }
  });
  return unlocked;
};

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö –∫—Ä—É–∂–∫–æ–≤
const circlesDataPath = join(dataDir, 'circles.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫—Ä—É–∂–∫–æ–≤
const getCirclesData = () => {
  if (fs.existsSync(circlesDataPath)) {
    try {
      const data = fs.readFileSync(circlesDataPath, 'utf8');
      return JSON.parse(data);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${circlesDataPath}:`, error);
      return [];
    }
  }
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  return [
    { id: 1, path: '/circle/circle1.mp4' },
    { id: 2, path: '/circle/circle2.mp4' },
    { id: 3, path: '/circle/circle3.mp4' }
  ];
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫—Ä—É–∂–∫–æ–≤
const saveCirclesData = (circles) => {
  try {
    fs.writeFileSync(circlesDataPath, JSON.stringify(circles, null, 2));
    return true;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ ${circlesDataPath}:`, error);
    return false;
  }
};

// –ú–∞—Ä—à—Ä—É—Ç—ã API

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/:userId', (req, res) => {
  try {
    const { userId } = req.params;
    const userData = getUserData(userId);

    if (!userData) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json(userData);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/user/:userId', (req, res) => {
  try {
    const { userId } = req.params;
    const userData = req.body;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    if (!userData.relationshipStartDate) {
      userData.relationshipStartDate = RELATIONSHIP_START_DATE.toISOString();
    }

    saveUserData(userId, userData);

    res.json({ success: true, message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (PATCH)
app.patch('/api/user/:userId', (req, res) => {
  try {
    const { userId } = req.params;
    const updates = req.body;

    let userData = getUserData(userId);

    if (!userData) {
      userData = {}; // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    if (!userData.relationshipStartDate) {
      userData.relationshipStartDate = RELATIONSHIP_START_DATE.toISOString();
    }

    userData = { ...userData, ...updates };

    saveUserData(userId, userData);

    res.json({ success: true, message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
app.get('/api/achievements/:userId', (req, res) => {
  try {
    const { userId } = req.params;
    const userData = getUserData(userId);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
    const startDate = userData && userData.relationshipStartDate
                      ? new Date(userData.relationshipStartDate)
                      : RELATIONSHIP_START_DATE;

    const unlockedAchievements = calculateUnlockedAchievements(startDate);

    res.json(unlockedAchievements);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –∫—Ä—É–∂–∫–∞
app.post('/api/upload-circle/:circleId', upload.single('video'), (req, res) => {
  try {
    const { circleId } = req.params;

    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const videoPath = `/circle/circle${circleId}.${req.file.originalname.split('.').pop()}`;

    res.json({
      success: true,
      message: '–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ',
      path: videoPath
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫—Ä—É–∂–∫–æ–≤
app.get('/api/circles', (req, res) => {
  try {
    const circles = getCirclesData();
    res.json(circles);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—Ä—É–∂–∫–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫—Ä—É–∂–∫–æ–≤
app.post('/api/circles', (req, res) => {
  try {
    const circles = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    if (!Array.isArray(circles)) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç id –∏ path
    const isValid = circles.every(circle =>
      typeof circle.id === 'number' &&
      typeof circle.path === 'string'
    );

    if (!isValid) {
      return res.status(400).json({
        error: '–ö–∞–∂–¥—ã–π –∫—Ä—É–∂–æ–∫ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —á–∏—Å–ª–æ–≤–æ–π id –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–π path'
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (saveCirclesData(circles)) {
      res.json({
        success: true,
        message: '–°–ø–∏—Å–æ–∫ –∫—Ä—É–∂–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
      });
    } else {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—Ä—É–∂–∫–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API
app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', message: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç', timestamp: new Date() });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});