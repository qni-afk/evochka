import React, { useState, useEffect } from 'react';
import '../styles/Games.css';
import MusicPlayer from '../components/MusicPlayer';

function Games() {
  const [gameStarted, setGameStarted] = useState(false);
  const [flowers, setFlowers] = useState([]);
  const [score, setScore] = useState(0);
  const [achievement, setAchievement] = useState(false);
  const [currentNotification, setCurrentNotification] = useState('');
  const [draggedFlower, setDraggedFlower] = useState(null);
  const [isDragging, setIsDragging] = useState(false);
  const [level, setLevel] = useState(1);
  const [combinations, setCombinations] = useState([]);
  const [maxFlowers, setMaxFlowers] = useState(36); // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 6x6
  const [achievements, setAchievements] = useState([]);
  const [coins, setCoins] = useState(0);
  const [grid, setGrid] = useState(Array(36).fill(null)); // 6x6 —Å–µ—Ç–∫–∞
  const [hoveredCell, setHoveredCell] = useState(null);
  const [selectedElements, setSelectedElements] = useState([]); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const [combo, setCombo] = useState(0); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–º–±–æ
  const [energy, setEnergy] = useState(500); // –£–≤–µ–ª–∏—á–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏
  const [maxEnergy, setMaxEnergy] = useState(500); // –ù–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
  const [showShop, setShowShop] = useState(false);
  const [dailyEnergyCollected, setDailyEnergyCollected] = useState(false);
  const [lastAdWatchTime, setLastAdWatchTime] = useState(0);
  const [shopItems] = useState([
    { id: 1, name: '–ù–æ–∂–∫–∏', energy: 500, cost: '–§–æ—Ç–æ', icon: 'üë£', type: 'bot_content', photoType: 'legs' },
    { id: 2, name: '–£–ª—ã–±–∫–∞', energy: 400, cost: '–§–æ—Ç–æ', icon: 'üòä', type: 'bot_content', photoType: 'smile' },
    { id: 3, name: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤ –ø–ª–∞—Ç—å–µ', energy: 300, cost: '–§–æ—Ç–æ', icon: 'üëó', type: 'bot_content', photoType: 'dress' },
    { id: 4, name: '–ö—Ä—É–∂–æ—á–µ–∫ —Å –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–º', energy: 250, cost: '–§–æ—Ç–æ', icon: 'üíã', type: 'bot_content', photoType: 'kiss' },
    { id: 5, name: '–°–µ–∫—Å–∏ –≥–∏—Ñ–∫–∞', energy: 200, cost: '–§–æ—Ç–æ', icon: 'üéÄ', type: 'bot_content', photoType: 'sexy' },
    { id: 6, name: '–ú–∞–ª–æ–µ –∑–µ–ª—å–µ —ç–Ω–µ—Ä–≥–∏–∏', energy: 25, cost: 50, icon: 'üß™', type: 'potion' },
    { id: 7, name: '–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ —ç–Ω–µ—Ä–≥–∏–∏', energy: 50, cost: 90, icon: '‚öóÔ∏è', type: 'potion' },
    { id: 8, name: '–ö—Ä–∏—Å—Ç–∞–ª–ª —ç–Ω–µ—Ä–≥–∏–∏', energy: 100, cost: 150, icon: 'üíé', type: 'potion' },
    { id: 9, name: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä—â–∏–∫', duration: 300, cost: 200, icon: 'ü§ñ', type: 'buff' },
    { id: 10, name: '–£—Å–∫–æ—Ä–∏—Ç–µ–ª—å —Ä–æ—Å—Ç–∞', duration: 180, cost: 100, icon: '‚ö°', type: 'buff' }
  ]);
  const [activeBuffs, setActiveBuffs] = useState([]);
  const [autoCollector, setAutoCollector] = useState(null);
  const [draggedIndex, setDraggedIndex] = useState(null);
  const [selectedPhoto, setSelectedPhoto] = useState(null);
  const [processingPurchase, setProcessingPurchase] = useState(false);
  const [currentItem, setCurrentItem] = useState(null);

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã —ç–º–æ–¥–∑–∏ –∏ –∏—Ö —É—Ä–æ–≤–Ω–∏
  const itemTiers = {
    // –¶–≤–µ—Ç–æ—á–Ω–∞—è –ª–∏–Ω–∏—è
    'üå±': { tier: 1, next: 'üå∏', points: 10, requires: 3 },
    'üå∏': { tier: 2, next: 'üåπ', points: 20, requires: 3 },
    'üåπ': { tier: 3, next: 'üå∫', points: 40, requires: 3 },
    'üå∫': { tier: 4, next: 'üíê', points: 80, requires: 3 },
    'üíê': { tier: 5, next: 'üåà', points: 160, requires: 3 },
    'üåà': { tier: 6, next: null, points: 320 },

    // –î–µ—Ä–µ–≤–æ –ª–∏–Ω–∏—è
    'üåø': { tier: 1, next: 'ü™¥', points: 15, requires: 3 },
    'ü™¥': { tier: 2, next: 'üå≥', points: 30, requires: 3 },
    'üå≥': { tier: 3, next: 'üå≤', points: 60, requires: 3 },
    'üå≤': { tier: 4, next: 'üéã', points: 120, requires: 3 },
    'üéã': { tier: 5, next: null, points: 240 },

    // –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ª–∏–Ω–∏—è
    'ü™®': { tier: 1, next: '‚õ≤', points: 20, requires: 3 },
    '‚õ≤': { tier: 2, next: 'üèÆ', points: 40, requires: 3 },
    'üèÆ': { tier: 3, next: 'üé™', points: 80, requires: 3 },
    'üé™': { tier: 4, next: null, points: 160 },
  };

  // –ù–∞—á–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const baseItems = ['üå±', 'üåø', 'ü™®'];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  const getRandomBaseItem = () => {
    return baseItems[Math.floor(Math.random() * baseItems.length)];
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
  const canMerge = (items) => {
    if (items.length !== 3) return false;
    return items.every(item => item === items[0]) && itemTiers[items[0]]?.next !== null;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  const addNewItem = () => {
    if (energy < 10) {
      setCurrentNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.');
      setAchievement(true);
      return;
    }

    const emptySpots = grid.map((cell, index) => cell === null ? index : -1).filter(index => index !== -1);
    if (emptySpots.length === 0) {
      setCurrentNotification('–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞! –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã.');
      setAchievement(true);
      return;
    }

    const randomSpot = emptySpots[Math.floor(Math.random() * emptySpots.length)];
    const newItem = getRandomBaseItem();

    setGrid(prev => {
      const newGrid = [...prev];
      newGrid[randomSpot] = newItem;
      return newGrid;
    });

    setEnergy(prev => Math.max(0, prev - 10)); // –£–º–µ–Ω—å—à–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
  const handleCellClick = (index) => {
    if (!grid[index]) return;

    setSelectedElements(prev => {
      const newSelected = [...prev];
      const itemIndex = newSelected.indexOf(index);

      if (itemIndex === -1) {
        if (newSelected.length < 3) {
          newSelected.push(index);
        }
      } else {
        newSelected.splice(itemIndex, 1);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      if (newSelected.length === 3) {
        const items = newSelected.map(idx => grid[idx]);
        if (canMerge(items)) {
          const nextTier = itemTiers[items[0]].next;
          const points = itemTiers[items[0]].points;

          setGrid(prev => {
            const newGrid = [...prev];
            newSelected.forEach(idx => newGrid[idx] = null);
            newGrid[newSelected[0]] = nextTier;
            return newGrid;
          });

          setScore(prev => prev + points);
          setCombo(prev => prev + 1);
          setCoins(prev => prev + Math.floor(points * (1 + combo * 0.1)));

          setCombinations(prev => [{
            id: Date.now(),
            text: `${items[0]} + ${items[0]} + ${items[0]} = ${nextTier} (+${points} –æ—á–∫–æ–≤)`
          }, ...prev.slice(0, 9)]);

          setCurrentNotification(`–°–æ–∑–¥–∞–Ω ${nextTier}! +${points} –æ—á–∫–æ–≤! –ö–æ–º–±–æ x${combo + 1}`);
          setAchievement(true);
          return [];
        }
      }

      return newSelected;
    });
  };

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
  useEffect(() => {
    const energyTimer = setInterval(() => {
      setEnergy(prev => Math.min(maxEnergy, prev + 5));
    }, 10000);

    return () => clearInterval(energyTimer);
  }, [maxEnergy]);

  // –°–±—Ä–æ—Å –∫–æ–º–±–æ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
  useEffect(() => {
    if (combo > 0) {
      const comboTimer = setTimeout(() => {
        setCombo(0);
      }, 5000);

      return () => clearTimeout(comboTimer);
    }
  }, [combo]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  useEffect(() => {
    if (achievement) {
      const timer = setTimeout(() => {
        setAchievement(false);
      }, 3000);
      return () => clearTimeout(timer);
    }
  }, [achievement]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
  const collectDailyEnergy = () => {
    if (!dailyEnergyCollected) {
      setEnergy(prev => Math.min(maxEnergy, prev + 50));
      setDailyEnergyCollected(true);
      setCurrentNotification('–ü–æ–ª—É—á–µ–Ω–æ 50 —ç–Ω–µ—Ä–≥–∏–∏! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤–æ–π –ø–æ—Ä—Ü–∏–µ–π!');
      setAchievement(true);

      // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –≤ –ø–æ–ª–Ω–æ—á—å
      const now = new Date();
      const tomorrow = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);
      const timeUntilMidnight = tomorrow - now;

      setTimeout(() => {
        setDailyEnergyCollected(false);
      }, timeUntilMidnight);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã
  const watchAdForEnergy = () => {
    const now = Date.now();
    if (now - lastAdWatchTime >= 300000) { // 5 –º–∏–Ω—É—Ç –∫—É–ª–¥–∞—É–Ω
      setEnergy(prev => Math.min(maxEnergy, prev + 30));
      setLastAdWatchTime(now);
      setCurrentNotification('–ü–æ–ª—É—á–µ–Ω–æ 30 —ç–Ω–µ—Ä–≥–∏–∏ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã!');
      setAchievement(true);
    } else {
      const remainingTime = Math.ceil((300000 - (now - lastAdWatchTime)) / 1000);
      setCurrentNotification(`–ü–æ–¥–æ–∂–¥–∏—Ç–µ ${remainingTime} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º`);
      setAchievement(true);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
  const handlePhotoSelect = (event) => {
    const file = event.target.files[0];
    if (file) {
      setSelectedPhoto(file);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
  const buyItem = (item) => {
    if (item.type === 'bot_content') {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
      document.getElementById('photo-input').click();
      setProcessingPurchase(true);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      setCurrentItem(item);
    } else if (coins >= item.cost) {
      setCoins(prev => prev - item.cost);

      if (item.type === 'potion') {
        setEnergy(prev => Math.min(maxEnergy, prev + item.energy));
        setCurrentNotification(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${item.name}! +${item.energy} —ç–Ω–µ—Ä–≥–∏–∏`);
      } else if (item.type === 'buff') {
        const buff = {
          ...item,
          endTime: Date.now() + item.duration * 1000
        };

        setActiveBuffs(prev => [...prev, buff]);

        if (item.name === '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä—â–∏–∫') {
          setAutoCollector(buff);
        }

        setCurrentNotification(`–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ${item.name}! –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${item.duration} —Å–µ–∫.`);
      }

      setAchievement(true);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
  const completePurchase = async (item) => {
    if (selectedPhoto) {
      try {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ –±–æ—Ç–∞
        setCurrentNotification(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: ${item.name}`);

        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        setEnergy(prev => Math.min(maxEnergy, prev + item.energy));
        setCurrentNotification(`–ü–æ–ª—É—á–µ–Ω–æ: ${item.name}! +${item.energy} —ç–Ω–µ—Ä–≥–∏–∏`);
        setSelectedPhoto(null);
        setProcessingPurchase(false);
        setAchievement(true);
      } catch (error) {
        setCurrentNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
        setSelectedPhoto(null);
        setProcessingPurchase(false);
        setAchievement(true);
      }
    }
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä—â–∏–∫–∞
  useEffect(() => {
    if (autoCollector) {
      const interval = setInterval(() => {
        if (Date.now() >= autoCollector.endTime) {
          setAutoCollector(null);
          setCurrentNotification('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä—â–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É');
          setAchievement(true);
          clearInterval(interval);
        } else {
          addNewItem();
        }
      }, 10000); // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

      return () => clearInterval(interval);
    }
  }, [autoCollector]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞—Ñ—Ñ–æ–≤
  useEffect(() => {
    const interval = setInterval(() => {
      setActiveBuffs(prev => {
        const now = Date.now();
        const active = prev.filter(buff => buff.endTime > now);
        if (active.length !== prev.length) {
          setCurrentNotification('–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–æ–Ω—É—Å–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å');
          setAchievement(true);
        }
        return active;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleDragStart = (e, index) => {
    e.dataTransfer.setData('text/plain', index);
    setDraggedIndex(index);
    e.target.style.opacity = '0.5';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleDragEnd = (e) => {
    e.target.style.opacity = '1';
    setDraggedIndex(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –Ω–∞–¥ —è—á–µ–π–∫–æ–π
  const handleDragOver = (e, index) => {
    e.preventDefault();
    if (draggedIndex === null) return;

    const draggedItem = grid[draggedIndex];
    const targetItem = grid[index];

    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
    if (targetItem && draggedItem === targetItem && itemTiers[draggedItem]?.next) {
      e.currentTarget.classList.add('can-merge');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∑–æ–Ω—ã —è—á–µ–π–∫–∏
  const handleDragLeave = (e) => {
    e.currentTarget.classList.remove('can-merge');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
  const handleDrop = (e, targetIndex) => {
    e.preventDefault();
    e.currentTarget.classList.remove('can-merge');

    if (draggedIndex === null) return;

    const draggedItem = grid[draggedIndex];
    const targetItem = grid[targetIndex];

    // –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞
    if (!targetItem) {
      setGrid(prev => {
        const newGrid = [...prev];
        newGrid[targetIndex] = draggedItem;
        newGrid[draggedIndex] = null;
        return newGrid;
      });
    }
    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∏ –º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å
    else if (draggedItem === targetItem && itemTiers[draggedItem]?.next) {
      // –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–µ—Ç–∏–π —Ç–∞–∫–æ–π –∂–µ —ç–ª–µ–º–µ–Ω—Ç
      const thirdIndex = grid.findIndex((item, idx) =>
        item === draggedItem && idx !== draggedIndex && idx !== targetIndex
      );

      if (thirdIndex !== -1) {
        const nextTier = itemTiers[draggedItem].next;
        const points = itemTiers[draggedItem].points;

        setGrid(prev => {
          const newGrid = [...prev];
          newGrid[draggedIndex] = null;
          newGrid[targetIndex] = null;
          newGrid[thirdIndex] = nextTier;
          return newGrid;
        });

        setScore(prev => prev + points);
        setCombo(prev => prev + 1);
        setCoins(prev => prev + Math.floor(points * (1 + combo * 0.1)));

        setCombinations(prev => [{
          id: Date.now(),
          text: `${draggedItem} + ${draggedItem} + ${draggedItem} = ${nextTier} (+${points} –æ—á–∫–æ–≤)`
        }, ...prev.slice(0, 9)]);

        setCurrentNotification(`–°–æ–∑–¥–∞–Ω ${nextTier}! +${points} –æ—á–∫–æ–≤! –ö–æ–º–±–æ x${combo + 1}`);
        setAchievement(true);
      }
    }

    setDraggedIndex(null);
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
  useEffect(() => {
    if (selectedPhoto && currentItem && processingPurchase) {
      completePurchase(currentItem);
    }
  }, [selectedPhoto]);

  return (
    <div className="page-container">
      <div className="dream-garden-container">
        {!gameStarted ? (
          <div className="start-game-panel">
            <h2>–í–æ–ª—à–µ–±–Ω—ã–π —Å–∞–¥</h2>
            <p>–û–±—ä–µ–¥–∏–Ω—è–π—Ç–µ —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª–µ–µ —Ä–µ–¥–∫–∏—Ö!</p>
            <div className="combination-hint">
              <h3>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</h3>
              <ul>
                <li>–í—ã–±–∏—Ä–∞–π—Ç–µ —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è</li>
                <li>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –±–æ–ª–µ–µ —Ä–µ–¥–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ –æ—á–∫–æ–≤</li>
                <li>–°–æ–±–∏—Ä–∞–π—Ç–µ –∫–æ–º–±–æ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã</li>
                <li>–°–ª–µ–¥–∏—Ç–µ –∑–∞ —ç–Ω–µ—Ä–≥–∏–µ–π - –æ–Ω–∞ –Ω—É–∂–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤</li>
              </ul>
            </div>
            <button className="start-button" onClick={() => setGameStarted(true)}>
              <span className="button-icon">üå±</span>
              –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
            </button>
          </div>
        ) : (
          <>
            <div className="game-header">
              <div className="stats-container">
                <div className="stat-item">–£—Ä–æ–≤–µ–Ω—å: {level}</div>
                <div className="stat-item">–û—á–∫–∏: {score}</div>
                <div className="stat-item">–ú–æ–Ω–µ—Ç—ã: {coins}</div>
                <div className="stat-item">–ö–æ–º–±–æ: x{combo}</div>
              </div>
              <div className="energy-container">
                <div className="energy-bar">
                  <div className="energy-fill" style={{ width: `${energy}%` }}></div>
                  <span className="energy-text">–≠–Ω–µ—Ä–≥–∏—è: {energy}%</span>
                </div>
                <div className="energy-actions">
                  <button
                    className="energy-button"
                    onClick={collectDailyEnergy}
                    disabled={dailyEnergyCollected}
                  >
                    {dailyEnergyCollected ? '‚úÖ' : 'üéÅ'} –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è
                  </button>
                  <button
                    className="energy-button"
                    onClick={watchAdForEnergy}
                    disabled={Date.now() - lastAdWatchTime < 300000}
                  >
                    ‚ñ∂ –°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É (+30 —ç–Ω–µ—Ä–≥–∏–∏)
                  </button>
                  <button
                    className="shop-button"
                    onClick={() => setShowShop(!showShop)}
                  >
                    üõí –ú–∞–≥–∞–∑–∏–Ω
                  </button>
                </div>
              </div>
              {activeBuffs.length > 0 && (
                <div className="active-buffs">
                  {activeBuffs.map(buff => (
                    <div key={buff.id} className="buff-item">
                      {buff.icon} {buff.name} ({Math.ceil((buff.endTime - Date.now()) / 1000)}—Å)
                    </div>
                  ))}
                </div>
              )}
            </div>

            {showShop && (
              <div className="shop-container">
                <div className="shop-content">
                  <h3>üõí –ú–∞–≥–∞–∑–∏–Ω</h3>

                  <div className="shop-section">
                    <h4 className="shop-section-title">üèÜ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</h4>
                    <p className="shop-section-description">
                      –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Å–æ–±—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
                    </p>
                    <div className="shop-items">
                      {shopItems
                        .filter(item => item.type === 'bot_content')
                        .map(item => (
                          <div key={item.id} className={`shop-item bot-content`}>
                            <span className="shop-item-icon">{item.icon}</span>
                            <div className="shop-item-info">
                              <div className="shop-item-name">{item.name}</div>
                              <div className="shop-item-description">
                                {processingPurchase && currentItem?.id === item.id
                                  ? '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...'
                                  : `–ü–æ–ª—É—á–∏—Ç–µ ${item.energy} —ç–Ω–µ—Ä–≥–∏–∏ –∑–∞ —Ñ–æ—Ç–æ`}
                              </div>
                              <div className="shop-item-cost">
                                {processingPurchase && currentItem?.id === item.id
                                  ? 'üñº –ó–∞–≥—Ä—É–∑–∫–∞...'
                                  : 'üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ'}
                              </div>
                            </div>
                            <button
                              className={`buy-button photo-upload ${
                                processingPurchase && currentItem?.id === item.id ? 'processing' : ''
                              }`}
                              onClick={() => buyItem(item)}
                              disabled={processingPurchase}
                            >
                              {processingPurchase && currentItem?.id === item.id
                                ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...'
                                : '–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ'}
                            </button>
                          </div>
                        ))}
                    </div>
                  </div>

                  <input
                    type="file"
                    id="photo-input"
                    accept="image/*"
                    style={{ display: 'none' }}
                    onChange={handlePhotoSelect}
                  />

                  <div className="shop-section">
                    <h4 className="shop-section-title">üß™ –ó–µ–ª—å—è —ç–Ω–µ—Ä–≥–∏–∏</h4>
                    <div className="shop-items">
                      {shopItems
                        .filter(item => item.type === 'potion')
                        .map(item => (
                          <div key={item.id} className={`shop-item potion`}>
                            <span className="shop-item-icon">{item.icon}</span>
                            <div className="shop-item-info">
                              <div className="shop-item-name">{item.name}</div>
                              <div className="shop-item-description">
                                +{item.energy} —ç–Ω–µ—Ä–≥–∏–∏
                              </div>
                              <div className="shop-item-cost">üí∞ {item.cost}</div>
                            </div>
                            <button
                              className="buy-button"
                              onClick={() => buyItem(item)}
                              disabled={coins < item.cost}
                            >
                              –ö—É–ø–∏—Ç—å
                            </button>
                          </div>
                        ))}
                    </div>
                  </div>

                  <div className="shop-section">
                    <h4 className="shop-section-title">‚ö° –ë–æ–Ω—É—Å—ã</h4>
                    <div className="shop-items">
                      {shopItems
                        .filter(item => item.type === 'buff')
                        .map(item => (
                          <div key={item.id} className={`shop-item buff`}>
                            <span className="shop-item-icon">{item.icon}</span>
                            <div className="shop-item-info">
                              <div className="shop-item-name">{item.name}</div>
                              <div className="shop-item-description">
                                –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {item.duration} —Å–µ–∫.
                              </div>
                              <div className="shop-item-cost">üí∞ {item.cost}</div>
                            </div>
                            <button
                              className="buy-button"
                              onClick={() => buyItem(item)}
                              disabled={coins < item.cost}
                            >
                              –ö—É–ø–∏—Ç—å
                            </button>
                          </div>
                        ))}
                    </div>
                  </div>

                  <button className="close-shop" onClick={() => setShowShop(false)}>
                    ‚ùå –ó–∞–∫—Ä—ã—Ç—å
                  </button>
                </div>
              </div>
            )}

            <div className="game-controls">
              <button
                onClick={addNewItem}
                className="add-item-button"
                disabled={energy < 10}
              >
                –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç (10 —ç–Ω–µ—Ä–≥–∏–∏)
              </button>
            </div>

            <div className="grid-container">
              {grid.map((item, index) => (
                <div
                  key={index}
                  className={`grid-cell ${selectedElements.includes(index) ? 'selected' : ''} ${item ? 'filled' : ''}`}
                  onClick={() => handleCellClick(index)}
                  onDragOver={(e) => handleDragOver(e, index)}
                  onDragLeave={handleDragLeave}
                  onDrop={(e) => handleDrop(e, index)}
                >
                  {item && (
                    <div
                      className={`grid-item ${draggedIndex === index ? 'dragging' : ''}`}
                      draggable
                      onDragStart={(e) => handleDragStart(e, index)}
                      onDragEnd={handleDragEnd}
                    >
                      {item}
                    </div>
                  )}
                </div>
              ))}
            </div>

            {combinations.length > 0 && (
              <div className="combinations-list">
                <h3>–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π:</h3>
                {combinations.map(combo => (
                  <div key={combo.id} className="combination-item">
                    {combo.text}
                  </div>
                ))}
              </div>
            )}

            {achievement && (
              <div className="achievement">
                {currentNotification}
              </div>
            )}
          </>
        )}
      </div>
      <MusicPlayer />
    </div>
  );
}

export default Games;