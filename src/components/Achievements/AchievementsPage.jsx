import React, { useState, useEffect, useCallback } from 'react';
import { useApi } from '../../contexts/ApiContext';
import './Achievements.css';

// –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞)
const achievementsData = [
  {
    id: 'start',
    title: "–ù–∞—á–∞–ª–æ –ø—É—Ç–∏",
    description: "–í—ã –≤–º–µ—Å—Ç–µ —É–∂–µ 1 –¥–µ–Ω—å!",
    icon: "‚ú®",
    daysRequired: 1
  },
  {
    id: 'week',
    title: "–ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è",
    description: "–í–º–µ—Å—Ç–µ —É–∂–µ 7 –¥–Ω–µ–π!",
    icon: "üóìÔ∏è",
    daysRequired: 7
  },
  {
    id: 'month',
    title: "–ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü",
    description: "–¶–µ–ª—ã–π –º–µ—Å—è—Ü –≤–º–µ—Å—Ç–µ!",
    icon: "üíñ",
    daysRequired: 30
  },
  {
    id: '100days',
    title: "100 –¥–Ω–µ–π –≤–º–µ—Å—Ç–µ",
    description: "–û—Ç–º–µ—Ç–∏–ª–∏ 100 –¥–Ω–µ–π –æ—Ç–Ω–æ—à–µ–Ω–∏–π!",
    icon: "üíØ",
    daysRequired: 100
  },
  {
    id: 'halfyear',
    title: "–ü–æ–ª–≥–æ–¥–∞ –ª—é–±–≤–∏",
    description: "–í–º–µ—Å—Ç–µ —É–∂–µ 6 –º–µ—Å—è—Ü–µ–≤!",
    icon: "‚òÄÔ∏è",
    daysRequired: 183
  },
  {
    id: 'anniversary',
    title: "–ì–æ–¥–æ–≤—â–∏–Ω–∞",
    description: "–û—Ç–ø—Ä–∞–∑–¥–Ω–æ–≤–∞–ª–∏ –ø–µ—Ä–≤—ã–π –≥–æ–¥ –≤–º–µ—Å—Ç–µ!",
    icon: "üéâ",
    daysRequired: 365
  }
];

const AchievementsPage = () => {
  const { loading, error, achievements: apiAchievements, loadAchievements, offlineMode } = useApi();
  const [localAchievements, setLocalAchievements] = useState([]);
  const [daysTogether, setDaysTogether] = useState(0);
  const [notification, setNotification] = useState(null);
  const [relationshipStartDate, setRelationshipStartDate] = useState(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
  const loadRelationshipStartDate = useCallback(() => {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
    const savedDate = localStorage.getItem('eva_relationshipStartDate');
    if (savedDate) {
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏–∑ localStorage:', savedDate);
      return new Date(savedDate);
    }
    
    // –ï—Å–ª–∏ –≤ localStorage –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –¥–∞—Ç—É –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π: 2023-12-09');
    return new Date("2023-12-09T00:00:00Z");
  }, []);

  // –†–∞—Å—á–µ—Ç –¥–Ω–µ–π –≤–º–µ—Å—Ç–µ
  const calculateDaysTogether = useCallback((startDate) => {
    if (!startDate) return 0;
    
    const today = new Date();
    const timeDiff = today - startDate;
    return Math.floor(timeDiff / (1000 * 60 * 60 * 24));
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–∑ localStorage
  const loadLocalAchievements = useCallback(() => {
    const savedAchievements = localStorage.getItem('achievements');
    if (savedAchievements) {
      try {
        return JSON.parse(savedAchievements);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–∑ localStorage:', error);
        return [];
      }
    }
    return achievementsData.map(achievement => ({
      ...achievement,
      dateUnlocked: null
    }));
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω–µ–π –≤–º–µ—Å—Ç–µ
  const updateAchievements = useCallback((days, currentAchievements) => {
    return currentAchievements.map(achievement => {
      if (!achievement.dateUnlocked && days >= achievement.daysRequired) {
        const newAchievement = {
          ...achievement,
          dateUnlocked: new Date().toISOString()
        };
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        setNotification(newAchievement);
        
        return newAchievement;
      }
      return achievement;
    });
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log('AchievementsPage: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    const startDate = loadRelationshipStartDate();
    setRelationshipStartDate(startDate);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤–º–µ—Å—Ç–µ
    const days = calculateDaysTogether(startDate);
    setDaysTogether(days);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –∏–∑ localStorage
    if (!offlineMode) {
      console.log('–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞');
      loadAchievements('eva');
    } else {
      console.log('–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ localStorage');
      const localAchievs = loadLocalAchievements();
      const updatedAchievs = updateAchievements(days, localAchievs);
      setLocalAchievements(updatedAchievs);
      localStorage.setItem('achievements', JSON.stringify(updatedAchievs));
    }
  }, [loadRelationshipStartDate, calculateDaysTogether, loadLocalAchievements, updateAchievements, loadAchievements, offlineMode]);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ apiAchievements
  useEffect(() => {
    if (apiAchievements && apiAchievements.length > 0) {
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞:', apiAchievements);
      setLocalAchievements(apiAchievements);
      localStorage.setItem('achievements', JSON.stringify(apiAchievements));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const localAchievs = loadLocalAchievements();
      const newAchievements = apiAchievements.filter(ach => 
        !localAchievs.some(localAch => localAch.id === ach.id && localAch.dateUnlocked)
      );
      
      if (newAchievements.length > 0) {
        setNotification(newAchievements[0]);
      }
    }
  }, [apiAchievements, loadLocalAchievements]);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    if (notification) {
      const timer = setTimeout(() => setNotification(null), 5000);
      return () => clearTimeout(timer);
    }
  }, [notification]);

  // –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –Ω–µ–∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const calculateProgress = (requiredDays) => {
    const progress = Math.min(Math.floor((daysTogether / requiredDays) * 100), 99);
    return progress;
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
  const displayAchievements = offlineMode ? localAchievements : (apiAchievements.length > 0 ? apiAchievements : localAchievements);

  return (
    <div className="achievements-page">
      <h1 className="section-title">–ù–∞—à–∏ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h1>
      <p className="section-description">–û—Ç–º–µ—á–∞–µ–º –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –Ω–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ª—é–±–≤–∏</p>
      
      {loading && !displayAchievements.length ? (
        <div className="loading-message">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...</div>
      ) : error ? (
        <div className="error-message">{error}</div>
      ) : (
        <div className="achievements-container">
          {displayAchievements.map(achievement => (
            <div 
              key={achievement.id} 
              className={`achievement ${achievement.dateUnlocked || achievement.unlockedDate ? 'unlocked' : 'locked'}`}
            >
              <div className="achievement-icon">
                {achievement.icon}
              </div>
              <div className="achievement-info">
                <h3>{achievement.title}</h3>
                <p>{achievement.description}</p>
                {(achievement.dateUnlocked || achievement.unlockedDate) ? (
                  <p className="unlock-date">
                    –ü–æ–ª—É—á–µ–Ω–æ: {new Date(achievement.dateUnlocked || achievement.unlockedDate).toLocaleDateString()}
                  </p>
                ) : (
                  <p className="progress">
                    –ü—Ä–æ–≥—Ä–µ—Å—Å: {calculateProgress(achievement.daysRequired)}%
                  </p>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
      
      <div className="relationship-stats">
        <div className="stat-card">
          <h3>–î–Ω–µ–π –≤–º–µ—Å—Ç–µ</h3>
          <p>{daysTogether}</p>
        </div>
        <div className="stat-card">
          <h3>–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –æ—Ç–∫—Ä—ã—Ç–æ</h3>
          <p>{displayAchievements.filter(a => a.dateUnlocked || a.unlockedDate).length}/{displayAchievements.length}</p>
        </div>
      </div>
      
      {notification && (
        <div className="achievement-notification show">
          <h3>–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!</h3>
          <p>{notification.title}</p>
          <p>{notification.description}</p>
          <button 
            className="close-notification" 
            onClick={() => setNotification(null)}
          >
            ‚úï
          </button>
        </div>
      )}
    </div>
  );
};

export default AchievementsPage;