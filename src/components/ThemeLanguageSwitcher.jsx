import React, { useState, useEffect } from 'react';
import { useLanguage } from '../context/LanguageContext';
import '../styles/ThemeLanguageSwitcher.css';

const ThemeLanguageSwitcher = () => {
  const [showTooltip, setShowTooltip] = useState(false);
  const { language, toggleLanguage } = useLanguage();
  const [secretCode, setSecretCode] = useState('');
  const [secretCodeVisible, setSecretCodeVisible] = useState(false);
  const [privateTrackEnabled, setPrivateTrackEnabled] = useState(false);

  // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥
  const correctCode = '7777';

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞
  const checkSecretCode = () => {
    if (secretCode === correctCode) {
      setPrivateTrackEnabled(true);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏
      localStorage.setItem('privateTrackEnabled', 'true');
      alert('–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –ø–µ—Å–Ω—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!');
    } else {
      alert('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!');
    }
    setSecretCode('');
    setSecretCodeVisible(false);
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const savedPrivateTrack = localStorage.getItem('privateTrackEnabled');
    if (savedPrivateTrack === 'true') {
      setPrivateTrackEnabled(true);
    }
  }, []);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º tooltip –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    setShowTooltip(true);
    const timer = setTimeout(() => {
      setShowTooltip(false);
    }, 3000);

    return () => clearTimeout(timer);
  }, []);

  return (
    <div className="switchers-container">
      <div className="language-switcher">
        {showTooltip && (
          <div className="language-tooltip">
            {language === 'ru' ? 'Toggle to switch to English' : '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞'}
          </div>
        )}
        <button
          className={`language-button ${language === 'ru' ? 'russian' : 'english'}`}
          onClick={toggleLanguage}
          title={language === 'ru' ? 'Switch to English' : '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π'}
          onMouseEnter={() => setShowTooltip(true)}
          onMouseLeave={() => setShowTooltip(false)}
        >
          <div className="flag-ru">
            <span className="flag-icon">üá∑üá∫</span>
          </div>
          <div className="language-slider"></div>
          <div className="flag-en">
            <span className="flag-icon">üá¨üáß</span>
          </div>
        </button>
      </div>

      {/* –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –ø–µ—Å–Ω–∏ */}
      <div className="secret-code-container">
        {!secretCodeVisible ? (
          <button
            className="secret-code-toggle"
            onClick={() => setSecretCodeVisible(true)}
            title="–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥"
          >
            üîê
          </button>
        ) : (
          <div className="secret-code-input-container">
            <input
              type="password"
              className="secret-code-input"
              placeholder="–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥"
              value={secretCode}
              onChange={(e) => setSecretCode(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && checkSecretCode()}
            />
            <button className="secret-code-submit" onClick={checkSecretCode}>‚úì</button>
            <button className="secret-code-cancel" onClick={() => setSecretCodeVisible(false)}>‚úï</button>
          </div>
        )}
      </div>
    </div>
  );
};

export default ThemeLanguageSwitcher;